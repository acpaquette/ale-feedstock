From 45f7addf70292bee10c508beaa2ba1761ec57908 Mon Sep 17 00:00:00 2001
From: acpaquette <acp263@nau.edu>
Date: Mon, 25 Nov 2024 11:30:17 -0700
Subject: [PATCH] Address gdal warning

---
 ale/base/base.py | 61 ++++++++++++++++++++++++------------------------
 1 file changed, 31 insertions(+), 30 deletions(-)

diff --git a/ale/base/base.py b/ale/base/base.py
index 7bddcea..791e912 100644
--- a/ale/base/base.py
+++ b/ale/base/base.py
@@ -327,60 +327,61 @@ class Driver():
     def short_mission_name(self):
         return self.__module__.split('.')[-1].split('_')[0]
 
-    @property 
-    def projection(self):
-        if not hasattr(self, "_projection"): 
+    @property
+    def read_geodata(self):
+        if not hasattr(self, "_geodata"):
             try: 
-              from osgeo import gdal 
+              from osgeo import gdal
+              gdal.UseExceptions()
             except: 
                 self._projection = ""
                 return self._projection
 
-            geodata = None
+            self._geodata = None
             if isinstance(self._file, pvl.PVLModule):
                 # save it to a temp folder
                 with tempfile.NamedTemporaryFile() as tmp:
                     tmp.write(pvl.dumps(self._file)) 
 
-                    geodata = gdal.Open(tempfile.name)
+                    self._geodata = gdal.Open(tempfile.name)
             else: 
                 # should be a path
                 if not os.path.exists(self._file): 
-                    self._projection = "" 
+                    self._geodata = None
                 else: 
-                    geodata = gdal.Open(self._file)
-   
+                    self._geodata = gdal.Open(self._file)
+
+        return self._geodata
+
+    @property 
+    def projection(self):
+        """
+        Return projection information generated by osgeo.
+
+        Returns
+        -------
+        str
+            A string representation of the projection information.
 
+        """
+        if not hasattr(self, "_projection"):
             # Try to get the projection, if we are unsuccessful set it
             # to empty
             try:
-              self._projection = geodata.GetSpatialRef().ExportToProj4()
+                self._projection = self.read_geodata.GetSpatialRef().ExportToProj4()
             except:
-              self._projection = "" 
+                self._projection = ""
+
         return self._projection
     
     @property 
     def geotransform(self):
         if not hasattr(self, "_geotransform"): 
-            try: 
-              from osgeo import gdal 
-            except: 
+            # Try to get the geotransform, if we are unsuccessful set it
+            # to the identity
+            try:
+                self._geotransform = self.read_geodata.GetGeoTransform()
+            except:
                 self._geotransform = (0.0, 1.0, 0.0, 0.0, 0.0, 1.0)
-                return self._geotransform
-
-            if isinstance(self._file, pvl.PVLModule):
-                # save it to a temp folder
-                with tempfile.NamedTemporaryFile() as tmp:
-                    tmp.write(pvl.dumps(self._file)) 
-
-                    geodata = gdal.Open(tempfile.name)
-                    self._geotransform = geodata.GetGeoTransform()
-            else: 
-                # should be a path
-                if not os.path.exists(self._file): 
-                    self._geotransform = (0.0, 1.0, 0.0, 0.0, 0.0, 1.0) 
-                else: 
-                    geodata = gdal.Open(self._file)
-                    self._geotransform = geodata.GetGeoTransform()
                 
         return self._geotransform
\ No newline at end of file
-- 
2.39.5 (Apple Git-154)

